# Define the graph using a dictionary
graph = {
    '0': ['1', '3', '4'],
    '1': ['2'],
    '2': [],
    '3': ['5'],
    '4': ['5'],
    '5': []
}

# Initialize an empty set for DFS visited nodes
visited_dfs = set()

# Depth-First Search (DFS) function
def dfs(visited, graph, node):
    if node not in visited:
        print(node, end=" ")
        visited.add(node)
        for adj in graph[node]:
            dfs(visited, graph, adj)

# Execute DFS
print("Following is the Depth-First Search:")
dfs(visited_dfs, graph, '0')

# Initialize lists for BFS visited nodes and queue
visited_bfs = []
queue = []

# Breadth-First Search (BFS) function
def bfs(visited, graph, node):
    visited.append(node)
    queue.append(node)
    while queue:
        m = queue.pop(0)
        print(m, end=" ")
        for neighbour in graph[m]:
            if neighbour not in visited:
                visited.append(neighbour)
                queue.append(neighbour)

# Execute BFS
print("\nFollowing is the Breadth-First Search:")
bfs(visited_bfs, graph, '0')
