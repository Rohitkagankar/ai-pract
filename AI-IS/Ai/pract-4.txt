N = 8

def printSolution(board):
    for i in range(N):
        for j in range(N):
            print(board[i][j], end=" ")
        print()

def isSafe(row, col, sc, bsc, rowLookup, scLookup, bscl):
    if scLookup[sc[row][col]] or bscl[bsc[row][col]] or rowLookup[row]:
        return False
    return True

def solveNQueensUtil(board, col, sc, bsc, rowLookup, scLookup, bscl):
    if col >= N:
        return True
    for i in range(N):
        if isSafe(i, col, sc, bsc, rowLookup, scLookup, bscl):
            board[i][col] = 1
            rowLookup[i] = True
            scLookup[sc[i][col]] = True
            bscl[bsc[i][col]] = True
            if solveNQueensUtil(board, col + 1, sc, bsc, rowLookup, scLookup, bscl):
                return True
            board[i][col] = 0
            rowLookup[i] = False
            scLookup[sc[i][col]] = False
            bscl[bsc[i][col]] = False
    return False

def solveNQueens():
    board = [[0 for i in range(N)] for j in range(N)]
    sc = [[0 for i in range(N)] for j in range(N)]
    bsc = [[0 for i in range(N)] for j in range(N)]
    rowLookup = [False] * N
    x = 2 * N - 1
    scLookup = [False] * x
    bscl = [False] * x
    for rr in range(N):
        for cc in range(N):
            sc[rr][cc] = rr + cc
            bsc[rr][cc] = rr - cc + N - 1
    if not solveNQueensUtil(board, 0, sc, bsc, rowLookup, scLookup, bscl):
        print("Solution does not exist")
        return False
    printSolution(board)
    return True

solveNQueens()
